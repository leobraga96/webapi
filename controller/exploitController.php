<?php

require_once ("model/exploit.php");
require_once ("database/database.php");
require_once ("exception/exploitException.php");

class exploitController {
	
    private $request;
	
    public function __construct($request) 
    {
        $this->request = $request;
    }

    public function routeOperation()
    {
        $body = $this->request->getBody(); 
        $queryString = $this->request->getQueryString();
		
        if ($this->request->getOperation() == 'disable' && $this->request->getMethod() == 'PUT')
            return $this->delete($body);
        switch ($this->request->getMethod())
        {
            case "GET":
                return $this->search($queryString);
            case "POST":
                return $this->create($body);
            case "PUT":
                return $this->update($body, $queryString);
        }
		
    }

    private function create($body) {
        try 
        {
            new Exploit($body["idexploit"], $body["porta"], $body["desc"], $body["type"], $body["file"], $body["plataforma"]);
            $body = $body + Array("ativo" => 1);
            return (new DBHandler())->insert($body, 'exploits'); 
        } catch (ExploitException $ae)
        {
            return $ae->toJson();
        }
    }

    private function search($queryString)
    {
        $conditions = $queryString + ["ativo" => 1];
        return (new DBHandler())->search($conditions, 'exploits');
    }

    private function update($body, $queryString)
    {
        try {
			
            $conditions = $queryString;
            $set = ['$set' => $body];
            return (new DBHandler())->update($conditions, $set, 'exploits');
		
        } catch (RequestException $ue) {
            http_response_code(400);
            return $ue->toJson();
        }
    }

    private function delete($body)
    {
        try {			
            $set = ['$set' => ['ativo' => 0]];
            $conditions = $body;
            return (new DBHandler())->update($conditions, $set, 'exploits');
		
        }
        catch (RequestException $ue) {
            http_response_code(400);
            return $ue->toJson();
        }
    }

}