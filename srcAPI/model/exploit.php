<?php

require_once('validation/exploitValidator.php');
require_once('exception/exploitException.php');

class Exploit{

    public function __construct ($exploit, $port, $desc, $type, $registernumberAutor)
    {
        $this->validateExploit = New ExploitValidator();

        $this->setexploit($exploit);
        $this->setPort($port);
        $this->setDesc($desc);
        $this->setType($type);
        $this->setregisternumberAutor($registernumberAutor);
    }

    public function setexploit($exploit)
    {
        if(!$this->validateExploit->isexploitValid($exploit))
			
        {
            http_response_code(400);
            throw new ExploitException("400", "Bad Request: invalid exploit id");
            }
        $this->exploit = $exploit;

    }

    public function setPort($port)
    {
        if(!$this->validateExploit->isPortValid($port))

        {
            http_response_code(400);
            throw new ExploitException("400", "Bad Request: invalid exploit port");
        }	
        $this->port = $port;

    }


    public function setDesc($desc)
    {
        if(!$this->validateExploit->isDescValid($desc))

        {
            http_response_code(400);
            throw new ExploitException("400", "Bad Request: invalid exploit description");
        }	
        $this->desc = $desc;

    }

    public function setType($type)
    {
        if(!$this->validateExploit->isTypeValid($type))

        {
            http_response_code(400);
            throw new ExploitException("400", "Bad Request: invalid exploit type");
        }	
        $this->type = $type;

    }

    public function setregisternumberAutor($registernumberAutor)
    {
        if(!$this->validateExploit->isregisternumberAutorValid($registernumberAutor))

        {
            http_response_code(400);
            throw new ExploitException("400", "Bad Request: invalid exploit author");
        }	
        $this->registernumberAutor = $registernumberAutor;

    }

	
}